#!/usr/bin/env python3
# -*- coding: utf-8 -*-
##############################################################
# Anonquit es un cliente de gnusocial sencillo para la l√≠nea #
# de comandos. fanta - <http://elbinario.net>                #
##############################################################

import sys
import sqlite3
import subprocess
import os
import getpass

# Comprobaciones varias
if sys.version_info<(3,1,4):
	sys.stderr.write("Missing: Python >3.1.4\n")
	exit(1)
if sys.platform != "linux":
	print ("Missing: linux")
	exit(1)
if subprocess.getoutput("whoami") == "root":
	print ("Do not run as root.")
	exit(1)

# Directorio de Anonquit
nombre = "anonquit"
version = "0.1"
apipath = "/api/statuses/update.xml"
tor_host = "localhost"
tor_port = "9050"
usuario = subprocess.getoutput("whoami")
config_dir= "/home/" + usuario + "/.config"
db_dir = config_dir + "/anonquit"
db_name = "anonquit.db"

if os.path.exists(config_dir):

	if os.path.exists(db_dir):
		if os.path.exists(db_dir + "/" + db_name):
			if len(sys.argv) == 1:
				print(nombre, version + "\n-h --help\tShow help\n-v --version\tShow version\n-u --user\tUse account\n-a --adduser\tAdd a username\n-d --deluser\tDelete a username")
			elif len(sys.argv) == 2:
				if sys.argv[1] == "-v" or sys.argv[1] == "--version":
					print(nombre, version)
				elif sys.argv[1] == "-h" or sys.argv[1] == "--help":
					print(nombre, version + "\n-h --help\tShow help\n-v --version\tShow version\n-u --user\tUse account\n-a --adduser\tAdd a username\n-d --deluser\tDelete a username")
				elif sys.argv[1] == "-u" or sys.argv[1] == "--user":
					print ("Error: Falta el nombre del usuario.\nExample: anonquit -u fanta@gnusocial.net")
				elif sys.argv[1] == "-a" or sys.argv[1] == "--adduser":
					nombre_usuario = input("Username (Example fanta): ")
					nodo_usuario = input("Node (Example gnusocial.net): ")
					passwd_usuario = getpass.getpass('Password: ')
					db = sqlite3.connect(db_dir +'/' + db_name)
					resultado = db.execute("SELECT user,node FROM accounts WHERE user = ? AND node = ?;", (nombre_usuario,nodo_usuario))
					row = []
					for row in resultado:
						nombre_usuario_db = row[0]
						nodo_usuario_db = row[1]
					db.commit()
					if len(row) == 2:
						print ("This user account already configured. You may use -d to delete it and start again.")
					else:
						cursor = db.cursor()
						cursor.execute("INSERT INTO accounts(user,node,password) VALUES (?,?,?);", (nombre_usuario,nodo_usuario,passwd_usuario))
						db.commit()
						db.close()
						print ("username " + nombre_usuario + " creada\nTo send an update, use: anonquit -u " + nombre_usuario + "@" + nodo_usuario + " 'The message you want to send'")
				elif sys.argv[1] == "-d" or sys.argv[1] == "--deluser":
					nombre_usuario = input("Username to *delete* (Example fanta): ")
					nodo_usuario = input("Node(Example gnusocial.net): ")
					db = sqlite3.connect(db_dir +'/' + db_name)
					cursor = db.cursor()
					cursor.execute("DELETE FROM accounts WHERE user = ? AND node = ?;", (nombre_usuario,nodo_usuario))
					db.commit()
					db.close()
					print ("username " + nombre_usuario + " deleted.")

			elif len(sys.argv) == 3:
				if sys.argv[1] == "-u" or sys.argv[1] == "--user":
					nombre_usuario = sys.argv[2].split("@")[0]
					nodo_usuario = sys.argv[2].split("@")[1]
					db = sqlite3.connect(db_dir +'/' + db_name)
					resultado = db.execute("SELECT user,node FROM accounts WHERE user = ? AND node = ?;", (nombre_usuario,nodo_usuario))
					row = []
					for row in resultado:
						nombre_usuario_db = row[0]
						nodo_usuario_db = row[1]
					db.commit()
					db.close()
					if len(row) == 2:
						print ("Username " + nombre_usuario + " en el nodo " + nodo_usuario + " is configured.\nIndique el mensaje que quiere enviar ya que le falta el parametro del mensaje\nExample: anonquit -u " + nombre_usuario_db + "@" + nodo_usuario_db + " 'Hola mundo'")
					else:
						print ("Username " + nombre_usuario + " en el nodo " + nodo_usuario + " is not configured.\n Did you try `anonquit --adduser`")

			elif len(sys.argv) == 4 or len(sys.argv) == 5:
				if sys.argv[1] == "-u" or sys.argv[1] == "--user":
					nombre_usuario = sys.argv[2].split("@")[0]
					nodo_usuario = sys.argv[2].split("@")[1]
					db = sqlite3.connect(db_dir +'/' + db_name)
					resultado = db.execute("SELECT user,node,password FROM accounts WHERE user = ? AND node = ?;", (nombre_usuario,nodo_usuario))
					row = []
					for row in resultado:
						nombre_usuario_db = row[0]
						nodo_usuario_db = row[1]
						password_usuario_db = row[2]
					db.commit()
					db.close()
					if len(row) == 3:
						mensaje_usuario = sys.argv[3]
						url_status = "https://" + nodo_usuario + apipath
						if len(sys.argv) == 5:
							if sys.argv[4] == "-t" or sys.argv[4] == "--tor":
								subprocess.getoutput("curl --socks5 " + tor_host  + ":" + tor_port + " -u " + nombre_usuario + ":" + password_usuario_db + " " + url_status  + " -d status=\'" + mensaje_usuario  + "\'")
								print ("Sent using tor")
							else:
								print ("The forth argument is incorrect. Try -t or --tor to send using tor.")
						else:
							subprocess.getoutput("curl -u " + nombre_usuario + ":" + password_usuario_db + " " + url_status  + " -d status=\'" + mensaje_usuario  + "\'")
					else:
						print ("Check the account name and the node. It is possible that is not added or that this misspelled.")

		else:
			db = sqlite3.connect(db_dir +'/' + db_name)
			cursor = db.cursor()
			cursor.execute('''CREATE TABLE IF NOT EXISTS accounts(user TEXT, node TEXT, password TEXT)''')
			db.commit()
			db.close()
	else:
		os.mkdir(db_dir)
else:
	os.mkdir(config_dir)
